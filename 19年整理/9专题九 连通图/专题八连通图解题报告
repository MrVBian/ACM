专题九 连通图


缩点之后形成的有向无环图，可以仿照树的定义令入度为0的点为树根，出度为0的点为叶子
特别得，当缩点之后只有一个点时，答案为0。

无根树转为双连通图，统计无根树叶子数量p，最后答案即为(p+1)/2。


A POJ 1236 Network of Schools
题意：
    给出 n 个结点，以及每个结点可到达的点，求有几个强连通分量，然后问至少在可到达的点中添加几个点，
    使得图变为强连通图
思路：
    先求出图的所有强连通分量，然后进行缩点构建新图，第一问是新图中入度为 0 点的个数，第二问是新图
    中入度0点数与出度0点数最大的一个


B UVA 315 Network
题意：
    给出一张无向图，求割点的个数
    多样例输入，每个样例包括一个网络
    第一行输入N（N<100），接下来的最多N行，每行第一个数表示一个地点，接下来的若干个数表示
    与改点连接有电缆的地点，当第一个数输入为0时，该样例输入结束。当N为0 时，输入结束。
    对于每个样例输出中转站的个数。
思路：
    求割点的模板题, 注意这里要考虑重边


C UVA 796 Critical Links
题意：
    顺序打印输出图中的桥
题解:
    直接套上桥的模板, 注意顺序存储和判一下重边就好了.
    输入或输出的时候要把u, v小的放在前面


D POJ 3694 Network
题意：
    在线求割边数量。操作只有加边。
思路：
    在线求割边数量。操作只有加边。
    首先要做无向图的缩点，生成一棵树，对于每一个查询，看看两个点是否在缩点后的同一个点中（这里用并查集），
    是的话，答案不变，不是的话，就要把这两点所属的树上的点连起来，
    再做一次缩点（这里用LCA很快可以解决）。
    1.利用Tarjan算法，求出每个边双联通分量，并且记录每个点属于哪一个分量。
    2.将每一个边双联通分量缩成一个点，最终得到一棵树。而我们想要得到一棵有根树，
    怎么办？其实在执行Tarjan算法的时候，就已经形成了一个有根树。所以我们只需要在Tarjan算法的基础上，
    再记录每一个点的父节点以及深度就可以了。
    3.每次询问的时候，如果两个点在同一个分量中，那么他们的相连不会减少桥的个数。如果两个点在不同的分量中，
    那么u->LCA(u,v)和v->LCA(u,v)上路径上的桥，都可以减少，路径上的点都可以缩成一个点，即合并成一个分量。
    
    我们也需要为每一个分量选出一个代表，以表示这个分量。与方法一的“视而不见”不同的是，方法二对每一个点都设置
    了一个归属集合，即表示这个点属于哪一个集合。由于在处理的过程中，一个集合可能又会被另一个集合所包含，所以
    我们可以利用并查集的路径压缩，很快地找到一个点的最终所属集合。


E POJ 3177 Redundant Paths
题意：
    有n个牧场，Bessie 要从一个牧场到另一个牧场，要求至少要有2条独立的路可以走。
    现已有m条路，求至少要新建多少条路，使得任何两个牧场之间至少有两条独立的路。
    两条独立的路是指：没有公共边的路，但可以经过同一个中间顶点。
思路：
    在同一个边双连通分量中，任意两点都有至少两条独立路可达，所以同一个边双连通分量里的所有点可以看做同一个点。
    缩点后，新图是一棵树，树的边就是原无向图的桥。
    现在问题转化为：在树中至少添加多少条边能使图变为双连通图。
    结论：添加边数=（树中度为1的节点数+1）/2


F HDU 4612 Warm up
题意：
    有n个点，m条无向边，问加一条边，最少可以剩下几个桥
思路：
    先双连通分量缩点，形成一颗树，然后求树的直径，就是减少的桥


G HDU 4635 Strongly connected
题意：
    题目明显告诉了这是强连通的题，询问最多添加多少条边，结果得到的依旧不是强连通图，
    如果一开始就是强连通图，则输出“-1”。
思路：
    首先，特判的肯定先解决，依旧是tarjan算法，如果是一个强连通图，输出“-1”。然后因为
    该题是求最大，而且是连通图和非连通图的临界条件。于是可以yy一下最大值的情况是怎样的。
    因为还是tarjan然后求DAG，这是最基本的，即我们已经将原图变成DAG了，此时还不能是强连通图，
    则必须有一个DAG对于其他所有的DAG都只有出边而不能有入边（或者只有入边而没有出边，这是一样的），
    而答案就是完全图的边数（n*(n-1)）- （这个特殊的DAG与外界不能相连的边数，即该DAG里的顶点个数
    乘以除该DAG的顶点外的所有顶点数）- （原来图本就存在的边数m）。而要想这个值最大，则这个特殊的
    DAG的元素必须最少（或者最大），而求DAG的元素个数就是简单的在推栈的过程中加上个计数器，
    并储存到一个数组里。最后的操作就只需要在出入度为0的DAG中找出元素最少的，做刚才的运算就可以了。


I HDU 4738 Caocao's Bridges
题目：
    曹操在长江上建立了一些点，点之间有一些边连着。如果这些点构成的无向图变成了连通图，那么曹操就无敌了。
    周瑜为了防止曹操变得无敌，就打算去摧毁连接曹操的点的桥。但是诸葛亮把所有炸弹都带走了，只留下一枚给周瑜。
    所以周瑜只能炸一条桥。题目给出n，m。表示有n个点，m条桥。接下来的m行每行给出x，y，z，表示x点和y点之间有一条桥，
    而且曹操派了z个人去守卫这条桥。现在问周瑜最少派多少人去炸桥。如果无法使曹操的点成为多个连通图，则输出-1.
思路：
    用Tarjan算法算出桥的数量，再比较哪一个的值最小。
    注意三点：
    1、有重边，所以Tarjan算法要处理重边。
    2、如果无向图图本身已经有两个连通图了，就无需派人去炸桥，这时候输出0。
    3、如果求出来的最小权值桥的守卫人数为0时，也需要派出一个人去炸桥。