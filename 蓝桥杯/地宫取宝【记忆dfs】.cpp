#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define _for(i,a,b) for(int i=(a);i<=(b);i++)
ll mod=1e9+7,ans,mp[55][55],dp[55][55][15][15];
int n,m,k,dir[][2]={{1,0},{0,1}};
inline void rd(){
    scanf("%d %d %d",&n,&m,&k);
    ll tmp;
    _for(i,1,n)
    _for(j,1,m) {scanf("%lld",&tmp);mp[i][j]=++tmp;}
}
bool Out(int x,int y){return x<1||x>n||y<1||y>m;}
ll dfs(int x,int y,int d,int v){
    int cx,cy;
    ll s=0,p=mp[x][y];
    if(dp[x][y][d][v]!=-1)
        return dp[x][y][d][v];
    if(d>k)
        return dp[x][y][d][v]=0;
    if(x==n&&y==m){
        if(d==k||d==k-1&&p>v)
            return dp[x][y][d][v]=1;
        return dp[x][y][d][v]=0;
    }
    _for(i,0,1){
        cx=x+dir[i][0];
        cy=y+dir[i][1];
        if(!Out(cx,cy)){
            if(p>v)  s+=dfs(cx,cy,d+1,p)%mod;
            s+=dfs(cx,cy,d,v)%mod;
        }
    }
    return dp[x][y][d][v]=s%mod;
}
int main()
{
    rd();
    memset(dp,-1,sizeof(dp));
    dfs(1,1,0,0);
    printf("%d",dp[1][1][0][0]);
}

//地宫取宝
//
//
//    X 国王有一个地宫宝库。是 n x m 个格子的矩阵。每个格子放一件宝贝。每个宝贝贴着价值标签。
//
//
//    地宫的入口在左上角，出口在右下角。
//
//
//    小明被带到地宫的入口，国王要求他只能向右或向下行走。
//
//
//    走过某个格子时，如果那个格子中的宝贝价值比小明手中任意宝贝价值都大，小明就可以拿起它（当然，也可以不拿）。
//
//
//    当小明走到出口时，如果他手中的宝贝恰好是k件，则这些宝贝就可以送给小明。
//
//
//    请你帮小明算一算，在给定的局面下，他有多少种不同的行动方案能获得这k件宝贝。
//
//
//【数据格式】
//
//
//    输入一行3个整数，用空格分开：n m k (1<=n,m<=50, 1<=k<=12)
//
//
//    接下来有 n 行数据，每行有 m 个整数 Ci (0<=Ci<=12)代表这个格子上的宝物的价值
//
//
//    要求输出一个整数，表示正好取k个宝贝的行动方案数。该数字可能很大，输出它对 1000000007 取模的结果。
//
//
//例如，输入：
//2 2 2
//1 2
//2 1
//程序应该输出：
//2
//
//
//再例如，输入：
//15 20 5
//0 5 3 7 6 1 4 156 23 3 5412 23 12 11 44 22 13 15 19 20
//0 5 3 85 312 352 1532 13520 5132 51320 15230 51320 5132 0123 213 654235 5623 13520 5612 56412 5612
//5412 5612 45612 31520 56120 3512 53120 1320 53120 864512 46521 45612 54612 65412 5521 5412 0 541 0 231
//5463120 56231 53120 3 84512 632 520 5623 230 320 5210 320 1320 3210 5120 321 321 213 0 5412
//1 1230 231 23 123 51 212 5642 312 320 5132 56412 3210 312 84652 532 46512 65412 512 45612
//0 5 3 7 6 1 4 156 23 3 5412 23 12 11 44 22 13 15 19 20
//0 5 3 85 312 352 1532 13520 5132 51320 15230 51320 5132 0123 213 654235 5623 13520 5612 56412 5612
//5412 5612 45612 31520 56120 3512 53120 1320 53120 864512 46521 45612 54612 65412 5521 5412 0 541 0 231
//5463120 56231 53120 3 84512 632 520 5623 230 320 5210 320 1320 3210 5120 321 321 213 0 5412
//1 1230 231 23 123 51 212 5642 312 320 5132 56412 3210 312 84652 532 46512 65412 512 45612
//0 5 3 7 6 1 4 156 23 3 5412 23 12 11 44 22 13 15 19 20
//0 5 3 85 312 352 1532 13520 5132 51320 15230 51320 5132 0123 213 654235 5623 13520 5612 56412 5612
//5412 5612 45612 31520 56120 3512 53120 1320 53120 864512 46521 45612 54612 65412 5521 5412 0 541 0 231
//5463120 56231 53120 3 84512 632 520 5623 230 320 5210 320 1320 3210 5120 321 321 213 0 5412
//1 1230 231 23 123 51 212 5642 312 320 5132 56412 3210 312 84652 532 46512 65412 512 45612
//
////8 12 2
////2 3 2 0 2 3 2 3 2 0 2 3
////0 2 3 0 2 3 0 2 3 0 2 3
////2 0 5 2 3 2 2 0 5 2 3 2
////0 2 3 2 0 5 0 2 3 2 0 5
////2 0 5 0 2 3 2 0 5 0 2 3
////2 3 2 2 0 5 2 3 2 2 0 5
////0 2 3 2 3 2 0 2 3 2 3 2
////2 0 5 2 3 2 2 0 5 2 3 2
//
//
//程序应该输出：
//14
//
//
//
//
//资源约定：
//峰值内存消耗 < 256M
//CPU消耗  < 1000ms
//
//
//
//
//请严格按要求输出，不要画蛇添足地打印类似：“请您输入...” 的多余内容。
//
//
//所有代码放在同一个源文件中，调试通过后，拷贝提交该源码。
//
//
//注意: main函数需要返回0
//注意: 只使用ANSI C/ANSI C++ 标准，不要调用依赖于编译环境或操作系统的特殊函数。
//注意: 所有依赖的函数必须明确地在源文件中 #include <xxx>， 不能通过工程设置而省略常用头文件。
//
//
//提交时，注意选择所期望的编译器类型。
